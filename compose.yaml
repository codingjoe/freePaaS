services:
  postgres:
    image: postgres:18.0-alpine
    volumes:
      - postgres:/var/lib/postgresql/data
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  redis:
    image: redis:8.2.2-alpine
    volumes:
      - redis:/bitnami/redis/data
    restart: unless-stopped
    environment:
      ALLOW_EMPTY_PASSWORD: yes
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
  web:
    build:
      context: .
      dockerfile: containers/web/Containerfile
      target: development
      args:
        UV_NO_DEV: 0
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    volumes:
      - .:/app:ro
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      REDIS_URL: redis://redis/
      DATABASE_URL: postgresql://postgres:postgres@${POSTGRES_PW:-postgres}/postgres
      GRANIAN_INTERFACE: asgi # Options: asgi, wsgi, rsgi (default)
      GRANIAN_LOG_ACCESS_ENABLED: true
      GRANIAN_LOG_ACCESS_FMT: '{"addr": "%(addr)s", "time": "%(time)s", "dt_ms": %(dt_ms)f, "status": %(status)d, "path": "%(path)s", "query_string": "%(query_string)s", "method": "%(method)s", "scheme": "%(scheme)s", "protocol": "%(protocol)s"}' # JSON format
      GRANIAN_RELOAD: true
    command: "main:app" # Path to your application instance
volumes:
  postgres:
  redis:
