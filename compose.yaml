services:

  postgres:
    image: postgres:18.0
    pull_policy: always
    volumes:
      - postgres:/var/lib/postgresql/data
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
    secrets:
      - postgres_password
    networks:
      - lan
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d app" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  redis:
    image: redis:8.0
    pull_policy: always
    volumes:
      - redis:/bitnami/redis/data
    restart: unless-stopped
    environment:
      ALLOW_EMPTY_PASSWORD: yes
    networks:
      - lan
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s

  web:
    build:
      context: .
      dockerfile: Containerfile
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
        restart: true
      redis:
        condition: service_healthy
        restart: true
    volumes:
      - .:/app:ro
    ports:
      - 8000:8000
    deploy:
      mode: replicated
      replicas: 2
    env_file:
      - .env
    networks:
      - lan
    environment:
      WEBSOCKET_REDIS_URL: redis://redis:6379/1
      DATABASE_URL: postgresql://postgres:postgres@postgres/postgres

  caddy:
    image: caddy
    pull_policy: always
    restart: unless-stopped
    depends_on:
      web:
        condition: service_started
    ports:
      - 80:80
      - 443:443
    volumes:
      - caddy:/data
      - caddy:/config
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
    networks:
      - lan
      - wan

volumes:
  postgres:
  redis:
  caddy:

networks:
  lan:
    driver: bridge
    internal: true
  wan:
    driver: bridge

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
